"""
Django settings for wiseBackend project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
import json

from datetime import timedelta
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BALARES_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRETS_FILE = "secrets.json"
SECRET_PATH = os.path.join(BALARES_DIR, SECRETS_FILE)
ALLOWED_HOSTS = ["*"]

if not os.path.isfile(SECRET_PATH):
	raise Exception("You are missing the secrets.json!")

file = open(SECRET_PATH)
secrets = json.load(file)
file.close()

def TestingEnviornment() -> bool:
	if "ubuntu" not in BALARES_DIR:
		return True
	return False

if "STAGING" in secrets.keys() and secrets['STAGING']:
	STAGING = True
	MAIN=False
elif "MAIN" in secrets.keys() and secrets["MAIN"]:
	MAIN=True
	STAGING = False
else:
	MAIN=False
	STAGING = False

TESTING_ENVIRONMENT = TestingEnviornment()
if STAGING:
	MAIN_HOST = 'ec2-3-142-51-235.us-east-2.compute.amazonaws.com'
elif TESTING_ENVIRONMENT:    
	MAIN_HOST = "http://127.0.0.1:8000"
else:   
	MAIN_HOST = "https://main.wiseeyes.link"
	ALLOWED_HOSTS.append(MAIN_HOST)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = secrets["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

if STAGING:
	print("YOU ARE IN A STAGING ENV")

if TESTING_ENVIRONMENT:
	print("YOU ARE IN A TESTING ENV")

if MAIN:
	print("YOU ARE IN A PRODUCTION ENV")


# Application definition

CORS_ALLOW_ALL_ORIGINS=True
CORS_ORIGIN_ALLOW_ALL = True   
CORS_ALLOW_HEADERS = ["*"]

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'Survey',
	'User',
	'Organization',
	'Console',
	'Proposal',
	'rest_framework',
	'corsheaders',
	'rest_framework_simplejwt',
	'rest_framework.authtoken',
	'rest_framework_simplejwt.token_blacklist'
]

REST_FRAMEWORK = {
   'DEFAULT_AUTHENTICATION_CLASSES': (
   	'rest_framework_simplejwt.authentication.JWTAuthentication',
   ),
}

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]
DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": lambda request: True,
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=9000),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=9000),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('JWT',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

'''
MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'querycount.middleware.QueryCountMiddleware'
]
'''

QUERYCOUNT = {
    'THRESHOLDS': {
        'MEDIUM': 50,
        'HIGH': 200,
        'MIN_TIME_TO_LOG':0,
        'MIN_QUERY_COUNT_TO_LOG':0
    },
    'IGNORE_REQUEST_PATTERNS': [],
    'IGNORE_SQL_PATTERNS': [],
    'DISPLAY_DUPLICATES': 5,
    'RESPONSE_HEADER': 'X-DjangoQueryCount-Count'
}

ROOT_URLCONF = 'wiseBackend.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'wiseBackend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

if TESTING_ENVIRONMENT:
	print("ON TESTING DB")
	DATABASES = {
		'default': {
			'ENGINE': 'django.db.backends.sqlite3',
			'NAME': BASE_DIR / 'db.sqlite3',
		}
	}
elif MAIN:
	print("ON POSTGRE PRODUCTION DB")
	import psycopg2.extensions
	DATABASES = {
		'default' : {
		'ENGINE' : 'django.db.backends.postgresql',
		'NAME' : secrets["DB_NAME"],
		'USER' : secrets["DB_USER"],
		'PASSWORD' : secrets["DB_PASSWORD"],
		'HOST' : secrets["DB_HOST"],
		'PORT' : secrets["DB_PORT"]
			}
	}
else:
	print("ON STAGING DB")
	DATABASES = {
			'default': {
				'ENGINE': 'django.db.backends.sqlite3',
				'NAME': BASE_DIR / 'db.sqlite3',
			}
		}
# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

LOGGING = {
 'version': 1,
 'disable_existing_loggers': False,
 'handlers': {
	 'file': {
		 'level': 'WARNING',
		 'class': 'logging.FileHandler',
		 'filename': 'debug.log',
	 },
 },
 'loggers': {
	 'django': {
		 'handlers': ['file'],
		 'level': 'WARNING',
		 'propagate': True,
	 },
 },
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = secrets["EMAIL_USER"]
EMAIL_HOST_PASSWORD = secrets["EMAIL_PASSWORD"]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#Remove limit of uploaded file
DATA_UPLOAD_MAX_MEMORY_SIZE=1024 * 1024 * 10
FILE_UPLOAD_MAX_MEMORY_SIZE=1024 * 1024 * 10 

from django import db
db.connections.close_all()